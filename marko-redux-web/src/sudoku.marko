import './index.css';
import { CheckSudoku } from './sulib';
//import { createStore } from 'redux';
//import rootReducer from './reducers';

class {
    /*NewSquareArray(size) {
        var array = new Array(size);
    
        for (var i = 0; i < size; i++) {
            array[i] = new Array(size);
            array[i].fill({num: "", variable: true});
        }
    
        return array;
    }*/
    
    onCreate() {
        /*this.state = {
            squares: this.NewSquareArray(9),
        };*/

        this.getSudoku();
    }

    /*onMount() {
        store.subscribe(() => {
            this.forceUpdate();
        });
    }*/

    // gets from database
    getSudoku() {
        fetch('/sudoku')
            .then((res) => res.json())
            .then((data) => {
                this.props.setSudoku(data.sudoku);
            })
            .catch((error) => console.log(error));
    }

    /*handleInput(x,y,event,el) {
        const num = event.target.value;
        if (num.length <= 1 && !isNaN(num)) {
            const squares = this.props.squares.slice();
            squares[y][x] = {num: num, variable: true};
            this.setState({
                squares: squares,
            });
        } else {
            event.target.value = this.state.squares[y][x].num;
        }
    }*/

    checkCorrect(event, el) {
        try {
            var sudokuVals = this.props.squares.map((row) => {
                return row.map((val) => {
                    return parseInt(val.num);
                });
            });
        } catch(e) {
            console.log("Error: " + e);
            return;
        }

        if (CheckSudoku(sudokuVals)) {
            console.log("Yay!");
        } else {
            console.log("Nope.");
        }
    }
}

//link rel='stylesheet' type='text/css' href='index.css'
//provider store=createStore(rootReducer)
div class='su-grid'
    for(row in state.squares | status-var=y)
        div class='su-row'
            for(sq in row | status-var=x)
                if(sq.variable)
                    div class='su-square'
                        input type='text' value=sq.num on-input('handleInput', x.getIndex(), y.getIndex()) class='sq-input'
                else
                    div class='su-square sq-input'
                        b -- ${sq.num}
div
    button on-click('checkCorrect') -- Check!
